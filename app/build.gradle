/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.4/userguide/building_java_projects.html
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    id 'org.jetbrains.kotlin.jvm' version '1.5.31'

    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Align versions of all Kotlin components.
    implementation platform('org.jetbrains.kotlin:kotlin-bom')

    // Use the Kotlin JDK 16 standard library.
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.6.10'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1.1-jre'

    implementation 'io.dropwizard:dropwizard-core:2.0.28'
    implementation 'io.dropwizard:dropwizard-jdbi3:2.0.28'
    implementation 'com.h2database:h2:2.1.210'

    // Use the json package.
    implementation 'org.json:json:20211205'

    // Use JUnit Jupiter API and add its dependencies for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'

    // Add Mockito for testing.
    testImplementation 'org.mockito:mockito-core:3.6.28'
    testImplementation 'org.mockito:mockito-junit-jupiter:3.6.28'

    // Add Kotlin unit testing dependencies.
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5:1.5.31'

}

compileKotlin {
    kotlinOptions.jvmTarget = "16"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "16"
}

test {
    useJUnitPlatform()

    testLogging {
        showStandardStreams = false

        // Show skipped and failed tests
        events "passed", "skipped", "failed"
    }

    doLast {
        println "\nLink to test results: file://${project.buildDir}/reports/tests/test/index.html"
    }
}

application {
    // Define the main class for the application.
    mainClass = 'portfolios.App'
}
